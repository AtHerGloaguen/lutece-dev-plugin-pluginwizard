/*
 * Copyright (c) 2002-2012, Mairie de Paris
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  1. Redistributions of source code must retain the above copyright notice
 *     and the following disclaimer.
 *
 *  2. Redistributions in binary form must reproduce the above copyright notice
 *     and the following disclaimer in the documentation and/or other materials
 *     provided with the distribution.
 *
 *  3. Neither the name of 'Mairie de Paris' nor 'Lutece' nor the names of its
 *     contributors may be used to endorse or promote products derived from
 *     this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * License 1.0
 */
package fr.paris.lutece.plugins.pluginwizard.service;

import fr.paris.lutece.plugins.pluginwizard.business.model.ResourceKey;
import java.util.HashMap;

/**
 * LocalizationService
 */
public class LocalizationService
{

    private static HashMap<String, String[]> _mapLocalized = new HashMap<String, String[]>();
    private static boolean _bInit = false;
    private static String[] pp =
    {
        "<fournisseur du plugin à compléter>", "<plugin's provider to define>"
    };
    private static String[] pd =
    {
        "<description du plugin à compléter>", "<plugin's decription to define>"
    };
    private static String[] bv =
    {
        "Valider", "Validate"
    };
    private static String[] pt =
    {
        "Titre de la page", "Page's title"
    };
    private static String[] tl =
    {
        "Liste des éléments", "List of elements"
    };
    private static String[] fn =
    {
        "Fonctionnalité générée par PluginWizard", "Feature generated by PluginWizard"
    };
    private static String[] fd =
    {
        "Description de la fonctionnalité générée par PluginWizard", "Description of the Feature generated by PluginWizard"
    };

    private static void init()
    {
        _mapLocalized.put( "plugin.provider", pp );
        _mapLocalized.put( "plugin.description", pd );
        _mapLocalized.put( "buttonValidate", bv );
        _mapLocalized.put( "pageTitle", pt );
        _mapLocalized.put( "tableLabel", tl );
        _mapLocalized.put( "name", fn );
        _mapLocalized.put( "description", fd );

    }

    static ResourceKey localize( String strKey )
    {
        ResourceKey key = new ResourceKey();
        key.setMarkerIdentifier( strKey );
        if (!_bInit)
        {
            init();
        }
        String strKeyname = strKey.substring( strKey.lastIndexOf( "." ) + 1 );

        String[] locales = _mapLocalized.get( strKey );
        if (locales != null)
        {
            key.setFrenchLocale( locales[0] );
            key.setEnglishLocale( locales[1] );
            return key;
        }

        locales = _mapLocalized.get( strKeyname );
        if (locales != null)
        {
            key.setFrenchLocale( locales[0] );
            key.setEnglishLocale( locales[1] );
            return key;
        }

        strKeyname = strKeyname.replaceAll( "rowTitle", "" );
        strKeyname = strKeyname.replaceAll( "column", "" );
        strKeyname = strKeyname.replaceAll( "button", "" );
        key.setFrenchLocale( strKeyname );
        key.setEnglishLocale( strKeyname );
        return key;
    }

}
